// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {

    static Array powers_of_two;

    /** Initializes the library. Creates the powers of two to the numbers from 0 to 16. */
    function void init() {
        let powers_of_two = Array.new(16);
        let powers_of_two[0] = 1;
        let powers_of_two[1] = 2;
        let powers_of_two[2] = 4;
        let powers_of_two[3] = 8;
        let powers_of_two[4] = 16;
        let powers_of_two[5] = 32;
        let powers_of_two[6] = 64;
        let powers_of_two[7] = 128;
        let powers_of_two[8] = 256;
        let powers_of_two[9] = 512;
        let powers_of_two[10] = 1024;
        let powers_of_two[11] = 2048;
        let powers_of_two[12] = 4096;
        let powers_of_two[13] = 8192;
        let powers_of_two[14] = 16384;
        let powers_of_two[15] = 32767 + 1;
        return;
    }

    /** Compares binary numbers of two numbers and returns false(=0) until there is no two 1 in the same spot in the binary numbers. */
    function boolean bit(int x, int n) {
        return ~((x & powers_of_two[n]) = 0); 
    }

    function int two_to_the(int power) {
        return powers_of_two[power];
    }

    /** Returns the absolute value of x. Compares number to 0 and returns positive number x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while(i < 16) {     // n=16 (16 numbers)

        /** Uses bit function to compare binary numbers of numbers. */

            if(Math.bit(y,i)) {
                let sum = sum + shiftedX;
            }
            else {
            let shiftedX = shiftedX + shiftedX;
            let i = i+1;
            }
        }
        return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var int q;

        if(y = 0) {
            do Sys.error(3); // Cannot divide with 0 so returns error code
        }

        /** Uses multiply function to make divide function easier. Takes negative numbers into account. */

        else {
            while(q < x) {
                if(Math.multiply(q,y) = Math.abs(x)) {
                    if(y < 0) {
                        return 0 - q;
                    }
                    if(x < 0) {
                        return 0 - q;
                    }
                    else {
                        return q; 
                }
		}
                else {
                    let q = q + 1;
                }
		}
                }
            
        
        return 0;
    }

    /** Returns the integer part of the square root of x. Uses multiply function to make squareroot function easier. Calculates powers of two of numbers starting from 0 and when the result is higher than the result from the number that user gave, it will return the previous number. */
    function int sqrt(int x) {
        var int j;
        let j = 0;

        /** Cannot compute square root of negative number. */

        if(x < 0) {
            do Sys.error(4);  
        }
        else {
            while(j < x) {
                if(Math.multiply(j,j) < x) {
                    let j = j + 1;
                }
                else {
                    return j;
                }
            }
        }
        return 0;
    }

    /** Returns the greater number. Compares given numbers and returns the greater one. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. Compares given numbers and returns the smaller one. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
